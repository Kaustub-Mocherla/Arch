#!/bin/bash
# hyprland-recovery-installer.sh
# Robust Hyprland installer with overheating protection and conflict resolution

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Cooling function to prevent overheating
cool_down() {
    local seconds=${1:-30}
    warn "Cooling down for $seconds seconds to prevent overheating..."
    sleep $seconds
}

# Backup existing configs
backup_configs() {
    log "Backing up existing configurations..."
    
    local backup_dir="$HOME/.config-backup-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$backup_dir"
    
    local configs=("hypr" "waybar" "kitty" "wofi" "swaylock" "wlogout" "rofi")
    
    for config in "${configs[@]}"; do
        if [ -d "$HOME/.config/$config" ]; then
            log "Backing up $config to $backup_dir"
            mv "$HOME/.config/$config" "$backup_dir/"
        fi
    done
    
    success "Configs backed up to $backup_dir"
}

# Clean package conflicts
resolve_package_conflicts() {
    log "Resolving package conflicts..."
    
    # Remove conflicting packages
    sudo pacman -R --noconfirm swww 2>/dev/null || true
    
    # Clean orphaned packages
    sudo pacman -Rns --noconfirm $(pacman -Qtdq) 2>/dev/null || true
    
    cool_down 15
    success "Package conflicts resolved"
}

# Install base packages in batches
install_base_packages() {
    log "Installing base packages in batches..."
    
    # Batch 1: Core Hyprland
    local batch1=(
        "hyprland" "hyprpaper" "waybar" "kitty" "wofi" 
        "sddm" "polkit-kde-agent" "xdg-desktop-portal-hyprland"
    )
    
    log "Installing batch 1: Core components"
    sudo pacman -S --needed --noconfirm "${batch1[@]}"
    cool_down 20
    
    # Batch 2: Media and utilities
    local batch2=(
        "pipewire" "pipewire-pulse" "wireplumber" "pavucontrol"
        "brightnessctl" "playerctl" "grim" "slurp" "wl-clipboard"
    )
    
    log "Installing batch 2: Media and utilities"
    sudo pacman -S --needed --noconfirm "${batch2[@]}"
    cool_down 20
    
    # Batch 3: Fonts and themes
    local batch3=(
        "ttf-font-awesome" "ttf-fira-code" "noto-fonts" "noto-fonts-emoji"
        "gtk3" "gtk4" "qt5-wayland" "qt6-wayland"
    )
    
    log "Installing batch 3: Fonts and themes"
    sudo pacman -S --needed --noconfirm "${batch3[@]}"
    cool_down 15
    
    success "Base packages installed successfully"
}

# Install AUR packages with cooling
install_aur_packages() {
    log "Installing AUR packages..."
    
    # Check if yay is installed
    if ! command -v yay &> /dev/null; then
        log "Installing yay AUR helper..."
        git clone https://aur.archlinux.org/yay.git /tmp/yay
        cd /tmp/yay && makepkg -si --noconfirm
        cd - && rm -rf /tmp/yay
        cool_down 20
    fi
    
    # AUR packages in batches
    local aur_batch1=("swww-git" "wlogout")
    local aur_batch2=("pokemon-colorscripts-git" "cava")
    
    log "Installing AUR batch 1"
    yay -S --needed --noconfirm "${aur_batch1[@]}"
    cool_down 25
    
    log "Installing AUR batch 2"
    yay -S --needed --noconfirm "${aur_batch2[@]}" || warn "Some AUR packages failed - continuing anyway"
    cool_down 15
    
    success "AUR packages installation completed"
}

# Create minimal fallback Hyprland config
create_minimal_config() {
    log "Creating minimal fallback Hyprland configuration..."
    
    mkdir -p "$HOME/.config/hypr"
    
    cat > "$HOME/.config/hypr/hyprland.conf" << 'EOF'
# Minimal Hyprland Configuration - Fallback
# Generated by recovery installer

# Monitor configuration
monitor=,preferred,auto,1

# Input configuration
input {
    kb_layout = us
    follow_mouse = 1
    touchpad {
        natural_scroll = false
    }
    sensitivity = 0
}

# General settings
general {
    gaps_in = 5
    gaps_out = 10
    border_size = 2
    col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg
    col.inactive_border = rgba(595959aa)
    layout = dwindle
}

# Decoration
decoration {
    rounding = 5
    blur {
        enabled = true
        size = 3
        passes = 1
    }
    drop_shadow = true
    shadow_range = 4
    shadow_render_power = 3
    col.shadow = rgba(1a1a1aee)
}

# Animations
animations {
    enabled = true
    bezier = myBezier, 0.05, 0.9, 0.1, 1.05
    animation = windows, 1, 7, myBezier
    animation = windowsOut, 1, 7, default, popin 80%
    animation = border, 1, 10, default
    animation = borderangle, 1, 8, default
    animation = fade, 1, 7, default
    animation = workspaces, 1, 6, default
}

# Layout
dwindle {
    pseudotile = true
    preserve_split = true
}

# Window rules
windowrulev2 = float,class:^(kitty)$,title:^(float_kitty)$

# Keybinds
$mainMod = SUPER

bind = $mainMod, Q, exec, kitty
bind = $mainMod, C, killactive,
bind = $mainMod, M, exit,
bind = $mainMod, E, exec, thunar
bind = $mainMod, V, togglefloating,
bind = $mainMod, R, exec, wofi --show drun
bind = $mainMod, P, pseudo,
bind = $mainMod, J, togglesplit,

# Move focus
bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d

# Switch workspaces
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5

# Move window to workspace
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5

# Mouse bindings
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# Autostart
exec-once = waybar
exec-once = hyprpaper
exec-once = /usr/lib/polkit-kde-authentication-agent-1

EOF

    success "Minimal Hyprland config created"
}

# Configure SDDM properly
configure_sddm() {
    log "Configuring SDDM..."
    
    # Enable SDDM service
    sudo systemctl enable sddm.service
    
    # Create SDDM config
    sudo mkdir -p /etc/sddm.conf.d
    
    sudo tee /etc/sddm.conf.d/hyprland.conf > /dev/null << EOF
[General]
DisplayServer=wayland
GreeterEnvironment=QT_WAYLAND_SHELL_INTEGRATION=layer-shell

[Wayland]
CompositorCommand=Hyprland
EOF
    
    # Create Hyprland desktop entry
    sudo tee /usr/share/wayland-sessions/hyprland.desktop > /dev/null << EOF
[Desktop Entry]
Name=Hyprland
Comment=An intelligent dynamic tiling Wayland compositor
Exec=Hyprland
Type=Application
EOF
    
    success "SDDM configured for Hyprland"
}

# Add user to required groups
setup_user_groups() {
    log "Adding user to required groups..."
    
    sudo usermod -aG video,input,render "$USER"
    
    success "User groups configured"
}

# Install End-4 dotfiles safely
install_end4_dotfiles() {
    log "Installing End-4 Hyprland dotfiles..."
    
    if [ -d "/tmp/end-4-dots" ]; then
        rm -rf /tmp/end-4-dots
    fi
    
    git clone --depth=1 https://github.com/end-4/dots-hyprland.git /tmp/end-4-dots
    cd /tmp/end-4-dots
    
    # Copy configs safely (they'll overwrite our minimal config if successful)
    if [ -d ".config" ]; then
        log "Copying End-4 configurations..."
        cp -r .config/* "$HOME/.config/" 2>/dev/null || warn "Some End-4 configs failed to copy"
        cool_down 10
    fi
    
    # Copy scripts and wallpapers
    if [ -d ".local" ]; then
        mkdir -p "$HOME/.local"
        cp -r .local/* "$HOME/.local/" 2>/dev/null || warn "Some End-4 scripts failed to copy"
    fi
    
    cd - && rm -rf /tmp/end-4-dots
    success "End-4 dotfiles installation completed"
}

# Main installation function
main() {
    log "Starting Hyprland Recovery Installation..."
    log "This installer includes cooling periods to prevent overheating"
    
    echo
    read -p "This will backup and replace your current configs. Continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log "Installation cancelled by user"
        exit 0
    fi
    
    # Step 1: Backup existing configs
    backup_configs
    cool_down 10
    
    # Step 2: Resolve package conflicts
    resolve_package_conflicts
    
    # Step 3: Install packages in batches
    install_base_packages
    
    # Step 4: Install AUR packages
    install_aur_packages
    
    # Step 5: Create minimal config first (fallback)
    create_minimal_config
    cool_down 10
    
    # Step 6: Configure SDDM
    configure_sddm
    
    # Step 7: Setup user groups
    setup_user_groups
    
    # Step 8: Install End-4 dotfiles (optional, overwrites minimal config)
    read -p "Install End-4 dotfiles? (Y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Nn]$ ]]; then
        install_end4_dotfiles
    fi
    
    success "Installation completed successfully!"
    warn "Please reboot your system to ensure all changes take effect"
    warn "If you encounter issues, the minimal config will provide a working fallback"
}

# Run main function
main "$@"
